#!/usr/bin/python

import datetime
import os
import sqlite3
import subprocess
import time
import calendar
from random import randint, choice, random

HEAVY = True # create a fuck ton of data
LOTS_O_SITES = False # use a fuck ton of sites

fmt = '%Y-%m-%d %H:%M:%S %Z'

raw_input('WARNING: will overrite all data stored at $MEW_DB_PATH (press enter)')

DB_PATH = os.environ.get('MEW_DB_PATH')
if not DB_PATH:
    print "You need to set $MEW_DB_PATH!"
    exit(1)
try:
    os.remove(DB_PATH)
except OSError:
    pass

INIT_PATH = '/'.join(DB_PATH.split('/')[:-1] + ['init.sql'])
if not os.path.exists(INIT_PATH):
    print 'init.sql needs to be in the same directory as $MEW_DB_PATH'

# init db
subprocess.call('echo ".exit" | sqlite3 {} -init {}'.format(DB_PATH, INIT_PATH), shell=True)
db = sqlite3.connect(DB_PATH)

# create user
c = db.cursor()
c.execute('INSERT INTO users VALUES (NULL, NULL, NULL, NULL)')
c.execute('INSERT INTO tokens VALUES (\'11111111111111111111111111111111\', 1)')
db.commit()
c.close()

today_date = datetime.datetime.now().date()
today = time.mktime(datetime.datetime(today_date.year, today_date.month, today_date.day).timetuple()) * 1000
now = time.mktime(datetime.datetime.now().timetuple()) * 1000

# valid hostnames
hostnames = ['google.com', 'www.facebook.com', 'm.reddit.com', 'stackoverflow.com', 'breitbart.com', 'xxxmidgetporn.com', 'glutenfreesingles.com']
if LOTS_O_SITES:
    for i in range(100):
        hostnames.append('site{}.com'.format(i))

def insert(c, hostname, timestamp):
    # print "Adding event at %s" % (datetime.datetime.utcfromtimestamp(timestamp / 1000)).strftime(fmt)
    c.execute('INSERT INTO events VALUES (?, ?, ?)', (1, hostname, timestamp))

if HEAVY:
    days = 365
    events_per_day = 100
    ms_per_day = 86400 * 1000
    prev_hostname = ''

    c = db.cursor()

    # test multiday overlap
    multiday_start = int(today) - ms_per_day * days + 86400 * 1000 / 2
    insert(c, 'multidayoverlap.com', multiday_start)
    multiday_end = multiday_start + 86400 * 1000 * 3
    insert(c, 'endmultidayoverlap.com', multiday_end)

    for _ in range(days * events_per_day):
            timestamp = randint(multiday_end + 1000, int(now))
            hostname = prev_hostname
            while hostname == prev_hostname:
                hostname = choice(hostnames)
            insert(c, hostname, timestamp)

    db.commit()
    c.close()

else:
    # days that will be populated
    days = []
    days.append(now - (1000 * 60 * 60 * 1)) # one hour ago
    days.append(today)
    days.append(today - (1000 * 60 * 60 * 24)) # one day ago
    days.append(today - (1000 * 60 * 60 * 48)) # two days ago
    days.append(today - (1000 * 60 * 60 * 24 * 7)) # one week ago
    days.append(today - (1000 * 60 * 60 * 24 * 14)) # two weeks ago
    days.append(today - (1000 * 60 * 60 * 24 * 31)) # one month ago
    days.append(today - (1000 * 60 * 60 * 24 * 62)) # two months ago
    days.append(today - (1000 * 60 * 60 * 24 * 31 * 18)) # ~18 months ago

    c = db.cursor()
    for timestamp in days:
        print "Adding events from timestamp: %s" % (datetime.datetime.utcfromtimestamp(timestamp / 1000)).strftime(fmt)
        prev_hostname = ''
        for _ in range(randint(5, 20)): # num site changes
            duration = randint(1000, 1000 * 60 * 20)
            timestamp += duration
            if timestamp > now:
                break
            hostname = prev_hostname
            while hostname == prev_hostname:
                hostname = choice(hostnames)
            insert(c, hostname, timestamp)
    db.commit()
    c.close()

# ~~~~~ TASK TEST DATA ~~~~~
# lorem_ipsum = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis arcu sapien, fermentum pulvinar nunc euismod in. Praesent auctor euismod pellentesque. Aliquam feugiat ultrices augue, sed placerat sapien elementum ultricies. Aliquam sapien elit, molestie ac congue in, vestibulum a diam. Nunc vel accumsan elit. Nulla eget mauris ante. Aliquam commodo tellus turpis, sit amet tempus nibh mollis et. Sed pharetra nunc eu mi aliquam aliquam. Nulla in mi quis dolor venenatis vestibulum a posuere ex. Phasellus eu consequat augue. Quisque id mauris imperdiet, dapibus odio nec, rhoncus odio. Nunc vitae convallis nibh. Cras elementum maximus magna quis fermentum.'
# lorem_ipsum = lorem_ipsum.replace('.', '')
# lorem_ipsum = lorem_ipsum.replace(',', '')
# lorem_ipsum = lorem_ipsum.lower()
#
# def gen_task_name():
#     length = randint(5, 80)
#     start = randint(0, len(lorem_ipsum) - length)
#     return lorem_ipsum[start:start+length]
#
# cur_day = datetime.date.today()
# dow = cur_day.isoweekday() % 7
# week_start = cur_day - datetime.timedelta(days=dow)
# days = [calendar.timegm((week_start + datetime.timedelta(days=i)).timetuple()) for i in range(7)]
#
# c = db.cursor()
#
# # create task categories
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'etc'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'mew'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'art project'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'guitar'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed0'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed1'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed2'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed3'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed4'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed5'))
# c.execute('INSERT INTO task_categories VALUES (?, ?)', (1, 'unnamed6'))
#
# # create tasks assigned to days
# for i in range(10):
#     category = choice([-1, randint(1, 10)])
#     completed = choice([0, 1])
#     c.execute('INSERT INTO tasks VALUES (?, ?, ?, ?, ?, ?)', (1, gen_task_name(), choice(days), category, completed, 0))
#
# # create tasks not assigned to days
# for i in range(50):
#     c.execute('INSERT INTO tasks VALUES (?, ?, ?, ?, ?, ?)', (1, gen_task_name(), 0, randint(1, 10), 0, 0))
#
# db.commit()
# c.close()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~

print 'Login url: 127.0.0.1:5000/guest/11111111111111111111111111111111'
